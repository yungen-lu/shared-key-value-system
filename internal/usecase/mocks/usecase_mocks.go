// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/yungen-lu/shared-key-value-list-system/internal/domain"
)

// MockList is a mock of List interface.
type MockList struct {
	ctrl     *gomock.Controller
	recorder *MockListMockRecorder
}

// MockListMockRecorder is the mock recorder for MockList.
type MockListMockRecorder struct {
	mock *MockList
}

// NewMockList creates a new mock instance.
func NewMockList(ctrl *gomock.Controller) *MockList {
	mock := &MockList{ctrl: ctrl}
	mock.recorder = &MockListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockList) EXPECT() *MockListMockRecorder {
	return m.recorder
}

// CreateHead mocks base method.
func (m *MockList) CreateHead(ctx context.Context, list domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHead", ctx, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHead indicates an expected call of CreateHead.
func (mr *MockListMockRecorder) CreateHead(ctx, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHead", reflect.TypeOf((*MockList)(nil).CreateHead), ctx, list)
}

// CreatePage mocks base method.
func (m *MockList) CreatePage(ctx context.Context, page domain.Page) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", ctx, page)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockListMockRecorder) CreatePage(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockList)(nil).CreatePage), ctx, page)
}

// DeleteHeadByKey mocks base method.
func (m *MockList) DeleteHeadByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHeadByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHeadByKey indicates an expected call of DeleteHeadByKey.
func (mr *MockListMockRecorder) DeleteHeadByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHeadByKey", reflect.TypeOf((*MockList)(nil).DeleteHeadByKey), ctx, key)
}

// DeleteOutdatedLists mocks base method.
func (m *MockList) DeleteOutdatedLists(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutdatedLists", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutdatedLists indicates an expected call of DeleteOutdatedLists.
func (mr *MockListMockRecorder) DeleteOutdatedLists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutdatedLists", reflect.TypeOf((*MockList)(nil).DeleteOutdatedLists), ctx)
}

// DeletePageByKey mocks base method.
func (m *MockList) DeletePageByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePageByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePageByKey indicates an expected call of DeletePageByKey.
func (mr *MockListMockRecorder) DeletePageByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePageByKey", reflect.TypeOf((*MockList)(nil).DeletePageByKey), ctx, key)
}

// GetHeadByID mocks base method.
func (m *MockList) GetHeadByID(ctx context.Context, id int32) (domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadByID", ctx, id)
	ret0, _ := ret[0].(domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadByID indicates an expected call of GetHeadByID.
func (mr *MockListMockRecorder) GetHeadByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadByID", reflect.TypeOf((*MockList)(nil).GetHeadByID), ctx, id)
}

// GetHeadByKey mocks base method.
func (m *MockList) GetHeadByKey(ctx context.Context, key string) (domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadByKey", ctx, key)
	ret0, _ := ret[0].(domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadByKey indicates an expected call of GetHeadByKey.
func (mr *MockListMockRecorder) GetHeadByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadByKey", reflect.TypeOf((*MockList)(nil).GetHeadByKey), ctx, key)
}

// GetHeads mocks base method.
func (m *MockList) GetHeads(ctx context.Context) ([]domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeads", ctx)
	ret0, _ := ret[0].([]domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeads indicates an expected call of GetHeads.
func (mr *MockListMockRecorder) GetHeads(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeads", reflect.TypeOf((*MockList)(nil).GetHeads), ctx)
}

// GetPageByID mocks base method.
func (m *MockList) GetPageByID(ctx context.Context, id int32) (domain.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByID", ctx, id)
	ret0, _ := ret[0].(domain.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByID indicates an expected call of GetPageByID.
func (mr *MockListMockRecorder) GetPageByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByID", reflect.TypeOf((*MockList)(nil).GetPageByID), ctx, id)
}

// GetPageByKey mocks base method.
func (m *MockList) GetPageByKey(ctx context.Context, key string) (domain.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByKey", ctx, key)
	ret0, _ := ret[0].(domain.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByKey indicates an expected call of GetPageByKey.
func (mr *MockListMockRecorder) GetPageByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByKey", reflect.TypeOf((*MockList)(nil).GetPageByKey), ctx, key)
}

// GetPages mocks base method.
func (m *MockList) GetPages(ctx context.Context) ([]domain.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPages", ctx)
	ret0, _ := ret[0].([]domain.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPages indicates an expected call of GetPages.
func (mr *MockListMockRecorder) GetPages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPages", reflect.TypeOf((*MockList)(nil).GetPages), ctx)
}

// UpdateHeadByKey mocks base method.
func (m *MockList) UpdateHeadByKey(ctx context.Context, key string, list domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHeadByKey", ctx, key, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeadByKey indicates an expected call of UpdateHeadByKey.
func (mr *MockListMockRecorder) UpdateHeadByKey(ctx, key, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeadByKey", reflect.TypeOf((*MockList)(nil).UpdateHeadByKey), ctx, key, list)
}

// UpdatePageByKey mocks base method.
func (m *MockList) UpdatePageByKey(ctx context.Context, key string, page domain.Page) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageByKey", ctx, key, page)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePageByKey indicates an expected call of UpdatePageByKey.
func (mr *MockListMockRecorder) UpdatePageByKey(ctx, key, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageByKey", reflect.TypeOf((*MockList)(nil).UpdatePageByKey), ctx, key, page)
}
