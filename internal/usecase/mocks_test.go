// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/yungen-lu/shared-key-value-list-system/internal/domain"
)

// MockList is a mock of List interface.
type MockList struct {
	ctrl     *gomock.Controller
	recorder *MockListMockRecorder
}

// MockListMockRecorder is the mock recorder for MockList.
type MockListMockRecorder struct {
	mock *MockList
}

// NewMockList creates a new mock instance.
func NewMockList(ctrl *gomock.Controller) *MockList {
	mock := &MockList{ctrl: ctrl}
	mock.recorder = &MockListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockList) EXPECT() *MockListMockRecorder {
	return m.recorder
}

// GetHeadByID mocks base method.
func (m *MockList) GetHeadByID(ctx context.Context, id int32) (domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadByID", ctx, id)
	ret0, _ := ret[0].(domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadByID indicates an expected call of GetHeadByID.
func (mr *MockListMockRecorder) GetHeadByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadByID", reflect.TypeOf((*MockList)(nil).GetHeadByID), ctx, id)
}

// GetHeads mocks base method.
func (m *MockList) GetHeads(ctx context.Context) ([]domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeads", ctx)
	ret0, _ := ret[0].([]domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeads indicates an expected call of GetHeads.
func (mr *MockListMockRecorder) GetHeads(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeads", reflect.TypeOf((*MockList)(nil).GetHeads), ctx)
}

// GetPageByID mocks base method.
func (m *MockList) GetPageByID(ctx context.Context, id int32) (domain.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByID", ctx, id)
	ret0, _ := ret[0].(domain.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByID indicates an expected call of GetPageByID.
func (mr *MockListMockRecorder) GetPageByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByID", reflect.TypeOf((*MockList)(nil).GetPageByID), ctx, id)
}

// GetPages mocks base method.
func (m *MockList) GetPages(ctx context.Context) ([]domain.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPages", ctx)
	ret0, _ := ret[0].([]domain.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPages indicates an expected call of GetPages.
func (mr *MockListMockRecorder) GetPages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPages", reflect.TypeOf((*MockList)(nil).GetPages), ctx)
}
