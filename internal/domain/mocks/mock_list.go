// Code generated by MockGen. DO NOT EDIT.
// Source: list.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/yungen-lu/shared-key-value-list-system/internal/domain"
)

// MockListRepo is a mock of ListRepo interface.
type MockListRepo struct {
	ctrl     *gomock.Controller
	recorder *MockListRepoMockRecorder
}

// MockListRepoMockRecorder is the mock recorder for MockListRepo.
type MockListRepoMockRecorder struct {
	mock *MockListRepo
}

// NewMockListRepo creates a new mock instance.
func NewMockListRepo(ctrl *gomock.Controller) *MockListRepo {
	mock := &MockListRepo{ctrl: ctrl}
	mock.recorder = &MockListRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepo) EXPECT() *MockListRepoMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockListRepo) DeleteByID(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockListRepoMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockListRepo)(nil).DeleteByID), ctx, id)
}

// DeleteByKey mocks base method.
func (m *MockListRepo) DeleteByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKey indicates an expected call of DeleteByKey.
func (mr *MockListRepoMockRecorder) DeleteByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockListRepo)(nil).DeleteByKey), ctx, key)
}

// GetAll mocks base method.
func (m *MockListRepo) GetAll(ctx context.Context) ([]domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockListRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockListRepo)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockListRepo) GetByID(ctx context.Context, id int32) (domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockListRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockListRepo)(nil).GetByID), ctx, id)
}

// GetByKey mocks base method.
func (m *MockListRepo) GetByKey(ctx context.Context, key string) (domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockListRepoMockRecorder) GetByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockListRepo)(nil).GetByKey), ctx, key)
}

// Store mocks base method.
func (m *MockListRepo) Store(ctx context.Context, list domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockListRepoMockRecorder) Store(ctx, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockListRepo)(nil).Store), ctx, list)
}

// UpdateByKey mocks base method.
func (m *MockListRepo) UpdateByKey(ctx context.Context, key string, list domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByKey", ctx, key, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByKey indicates an expected call of UpdateByKey.
func (mr *MockListRepoMockRecorder) UpdateByKey(ctx, key, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByKey", reflect.TypeOf((*MockListRepo)(nil).UpdateByKey), ctx, key, list)
}
